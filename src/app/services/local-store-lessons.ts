import { Injectable } from '@angular/core';

@Injectable()
export class LocalStoreLessonsService {
    constructor() { }
}

const JavaJunLesson = {
    nameLesson: 'Основы Java',
    countLesson: 'Занятие #1',
    contentLesson: 'По сложившейся традиции первая рограмма на изучаемом языке программирования должна выводить строку Hello, world. Текст такой программы на Java выглядит следующим образом:',
    homeWorkLesson: '1) Расскажите для каких целей будет подходить языке Java? Можно ли на нем создавать веб сайты? 2) Скажите какие программы должны быть установлены для корректной работы Java?',
    nameTeacherLesson: 'Александр Миранков'
};

const JavaMiddleLesson = {
    nameLesson: 'Средний Java',
    countLesson: 'Занятие #2',
    contentLesson: 'Сперва ООП может показаться чересчур сложным и непонятным, но на самом деле это вовсе не так. Давайте абстрагируемся от сложным понятий и попробуем описать ООП простыми словами. В качестве примера возьмем робота, которого будем описывать. Класс - это чертеж робота, а экземпляр класса - это натуральный робот, изготовленный по чертежу. Наследование - это когда мы копируем чертеж обычного и подрисовываем к нему крылья и пулемет, потому что нам нужен робот, который умеет летать и стрелять. Полиморфизм - это когда у нас есть небольшое стадо роботов, изготовленных по разным чертежам. Но так как все чертежи были скопированы с одного начального, то мы можем не думать о том, какой именно этот робот - мы просто можем сказать ему, чтоб он уничтожил человечество. А каким оружием - не наше дело, это зависит от того, какое именно оружие было пририсовано к его чертежу. Каждый класс может иметь свои методы (функции), поля (переменные), а также конструкторы. На основе любого класса можно создавать неограниченное количество объектов, каждый из которых будет иметь свои характеристики.',
    homeWorkLesson: '1) Назовите 4 основных концепции ООП, а также вкратце расскажите что они делают и за какие функции отвечают. 2) Что такое экземпляр и как много их может быть?',
    nameTeacherLesson: 'Александр Миранков'
};

const JavaSeniorLesson = {
    nameLesson: 'Продвинутый Java',
    countLesson: 'Занятие #3',
    contentLesson: 'В этом уроке мы с вами изучим перегрузку методов (функций) в языке Java. Благодаря этой функции мы можем создать несколько разных функций с одним и тем же именем. С перегрузкой методов мы уже не раз сталкивались, хотя ни разу её не создавали собственноручно. Перегрузка методов это очень удобное свойство в программировании. Оно позволяет создать несколько функций с одним и тем же именем и с различным количеством параметров. Благодаря этому мы можем обращаться лишь к одной функции (к одному имени) и передавать разные параметры в зависимости от ситуации.',
    homeWorkLesson: 'Необходимо оформить подписку на проект, чтобы получить доступ ко всем домашним заданиям!',
    nameTeacherLesson: 'Александр Миранков'
};

const CSharpJunLesson = {
    nameLesson: 'Основы С#',
    countLesson: 'Занятие #1',
    contentLesson: 'На сегодняшний момент язык программирования C# один из самых мощных, быстро развивающихся и востребованных языков в ИТ-отрасли. В настоящий момент на нем пишутся самые различные приложения: от небольших десктопных программок до крупных веб-порталов и веб-сервисов, обслуживающих ежедневно миллионы пользователей. По сравнению с другими языками C# достаточно молодой, но в то же время он уже прошел большой путь. Первая версия языка вышла вместе с релизом Microsoft Visual Studio .NET в феврале 2002 года. Текущей версией языка является версия C# 7.0, которая вышла в 7 марта 2017 года вместе с Visual Studio 2017. C# является языком с Си-подобным синтаксисом и близок в этом отношении к C++ и Java. Поэтому, если вы знакомы с одним из этих языков, то овладеть C# будет легче. C# является объектно-ориентированным и в этом плане много перенял у Java и С++. Например, C# поддерживает полиморфизм, наследование, перегрузку операторов, статическую типизацию. Объектно-ориентированный подход позволяет решить задачи по построению крупных, но в тоже время гибких, масштабируемых и расширяемых приложений. И C# продолжает активно развиваться, и с каждой новой версией появляется все больше интересных функциональностей, как, например, лямбды, динамическое связывание, асинхронные методы и т.д.',
    homeWorkLesson: 'Написать программу на С# Hello World',
    nameTeacherLesson: 'Александр Миранков'
};

const CSharpMiddleLesson = {
    nameLesson: 'Средний С#',
    countLesson: 'Занятие #2',
    contentLesson: 'C# является полноценным объектно-ориентированным языком. Это значит, что программу на C# можно представить в виде взаимосвязанных взаимодействующих между собой объектов. Описанием объекта является класс, а объект представляет экземпляр этого класса. Можно еще провести следующую аналогию. У нас у всех есть некоторое представление о человеке, у которого есть имя, возраст, какие-то другие характеристики. То есть некоторый шаблон - этот шаблон можно назвать классом. Конкретное воплощение этого шаблона может отличаться, например, одни люди имеют одно имя, другие - другое имя. И реально существующий человек (фактически экземпляр данного класса) будет представлять объект этого класса. По умолчанию проект консольного приложения уже по умолчанию содержит один класс Program, с которого и начинается выполнение программы. По сути класс представляет новый тип, который определяется пользователем. Класс определяется с помощью ключевого слова сlass',
    homeWorkLesson: 'Разработать программу по принципам ООП',
    nameTeacherLesson: 'Александр Миранков'
};

const CSharpSeniorLesson = {
    nameLesson: 'Продвинутый С#',
    countLesson: 'Занятие #3',
    contentLesson: 'Ранее мы посмотрели, как сохранять информацию в текстовые файлы, а также затронули сохранение несложных структур в бинарные данные. Но нередко подобных механизмов оказывается недостаточно особенно для сохранения сложных объектов. С этой проблемой призван справится механизм сериализации. Сериализация представляет процесс преобразования какого-либо объекта в поток байтов. После преобразования мы можем этот поток байтов или записать на диск или сохранить его временно в памяти. А при необходимости можно выполнить обратный процесс - десериализацию, то есть получить из потока байтов ранее сохраненный объект.',
    homeWorkLesson: 'Сериализовать файл с помощью языка С#',
    nameTeacherLesson: 'Александр Миранков'
};

const JavaScriptJunLesson = {
    nameLesson: 'Основы JavaScript',
    countLesson: 'Занятие #1',
    contentLesson: 'В первом уроке вы ознакомитесь с языком JavaScript. Вам будет рассказано на что способен данный язык, какие библиотеки и платформы созданы на основе этого языка, а также какие задачи способен решать данный язык. вы создадите первую простую программу для вывода информации на экран несколькими способами при помощи JS. Вы ознакомитесь с синтаксисом HTML и CSS и напишите простейшую верстку сайта. После прохождения урока вы получите домашние задания',
    homeWorkLesson: 'Написать программу на JavaScript Hello World!',
    nameTeacherLesson: 'Александр Миранков'
};

const JavaScriptMiddleLesson = {
    nameLesson: 'Средний JavaScript',
    countLesson: 'Занятие #2',
    contentLesson: 'Язык JavaScript ориентирован на работу с пользовательским интерфейсом. При работе с пользователем необходимо уметь обрабатывать его действия (нажатие на блок, наведение мышки, вписание чего-либо в блок и так далее). Для обработки всех таких событий в JavaScript существует специальный обработчик событий, который можно использовать из специальных HTML атрибутов, а также через прописание событий в JS файле. В ходе урока вы научитесь работать с пользователем и обработывать дейсвтия, которые он совершает на сайте. В конце урока вам будет дано домашнее задание на закрепление пройденного материала.',
    homeWorkLesson: 'Написать несколько простейших обработчиков на кнопки',
    nameTeacherLesson: 'Александр Миранков'
};

const JavaScriptSeniorLesson = {
    nameLesson: 'Продвинутый JavaScript',
    countLesson: 'Занятие #3',
    contentLesson: 'В ходе урока вы разработаете весь необходимый функционал, позволяющий получать данные с сайта и записывать их в файл в формате JSON. Все полученные данные будут выведены на сайте и оформлены при помощи стилей. Также будет добавлена обработка форм, повзоляющая проверять введенные данные и выдавать ошибки, если поля будут не заполнены.',
    homeWorkLesson: 'Написать свой сервер для обработки запросов на JavaScript',
    nameTeacherLesson: 'Александр Миранков'
};

const CPlusJunLesson = {
    nameLesson: 'Основы C++',
    countLesson: 'Занятие #1',
    contentLesson: 'С++ является мощным языком, унаследовав от Си богатые возможности по работе с памятью. Поэтому нередко С++ находит свое применение в системном программировании, в частности, при создании операционных систем, драйверов, различных утилит, антивирусов и т.д. К слову сказать, ОС Windows большей частью написана на С++. Но только системным программированием применение данного языка не ограничивается. С++ можно использовать в программах любого уровня, где важны скорость работы и производительность. Нередко он применяется для создания графических приложений, различных прикладных программ. Также особенно часто его используют для создания игр с богатой насыщенной визуализацией. Кроме того, в последнее время набирает ход мобильное направление, где С++ тоже нашел свое применение. И даже в веб-разработке также можно использовать С++ для создания веб-приложений или каких-то вспомогательных сервисов, которые обслуживают веб-приложения. В общем С++ - язык широкого пользования, на котором можно создавать практически любые виды программ.',
    homeWorkLesson: 'Написать на С++ Hello World',
    nameTeacherLesson: 'Александр Миранков'
};

const CPlusMiddleLesson = {
    nameLesson: 'Средний C++',
    countLesson: 'Занятие #2',
    contentLesson: 'При чтении и записи в предыдущих темах использовались объекты std::cout и std::cin соответственно. Причем они использовались с префиксом std::. Этот префикс указывает, что объекты cout, cin, endl определены в пространствен имен std. А само двойное двоеточие :: представляет оператор области видимости (scope operator), который позволяет указать, в каком пространсте имен определен объект. И без префикса эти объекты по умолчанию мы использовать не можем. Однако подобная запись может показаться несколько громоздкой. И в этом случае можно использовать оператор using, который позволяет ввести в программу объекты из различных пространств имен.',
    homeWorkLesson: 'Подлключить несколько сторонних библиотек к своей программе',
    nameTeacherLesson: 'Александр Миранков'
};

const CPlusSeniorLesson = {
    nameLesson: 'Продвинутый C++',
    countLesson: 'Занятие #3',
    contentLesson: 'Операторы ввода >> и вывода << прекрасно работают для примитивных типов данных, таких как int или double. В то же время для использования их с объектами классов необходимо переопределять эти операторы. Обычно первый параметр оператора << представляет ссылку на неконстантный объект ostream. Данный объект не должен представлять константу, так как запись в поток изменяет его состояние. Причем параметр представляет именно ссылку, так как нельзя копировать объект класса ostream. Второй параметр оператора определяется как ссылка на константу объекта класса, который надо вывести в поток. Для совместимости с другими операторами переопределяемый оператор должен возвращать значение параметра ostream. Также следует отметить, что операторы ввода и вывода не должны быть членами в классе, а определяются вне класса как обычные функции. Первый параметр оператора >>, как правило, представляет ссылку на объект istream, с которого осуществляется чтение. Второй параметр представляет ссылку на неконстантный объект, в который надо считать данные. Обычно в качестве результата операторы возвращают ссылку на поток ввода istream из первого параметра.',
    homeWorkLesson: 'Использовать операторы ввода и вывода в программе',
    nameTeacherLesson: 'Александр Миранков'
};

const SQLJunLesson = {
    nameLesson: 'Основы SQL',
    countLesson: 'Занятие #1',
    contentLesson: 'SQL Server является одной из наиболее популярных систем управления базами данных (СУБД) в мире. Данная СУБД подходит для самых различных проектов: от небольших приложений до больших высоконагруженных проектов. SQL Server был создан компанией Microsoft. Первая версия вышла в 1987 году. А текущей версией является версия 16, которая вышла в 2016 году и которая будет использоваться в текущем руководстве. SQL Server долгое время был исключительно системой управления базами данных для Windows, однако начиная с версии 16 эта система доступна и на Linux.',
    homeWorkLesson: 'Написать простейшую базу данных',
    nameTeacherLesson: 'Александр Миранков'
};

const SQLMiddleLesson = {
    nameLesson: 'Средний SQL',
    countLesson: 'Занятие #2',
    contentLesson: 'Внешние ключи применяются для установки связи между таблицами. Внешний ключ устанавливается для столбцов из зависимой, подчиненной таблицы, и указывает на один из столбцов из главной таблицы. Хотя, как правило, внешний ключ указывает на первичный ключ из связанной главной таблицы, но это необязательно должно быть непременным условием. Внешний ключ также может указывать на какой-то другой столбец, который имеет уникальное значение.',
    homeWorkLesson: 'Написать несколько запросов к базе данных',
    nameTeacherLesson: 'Александр Миранков'
};

const SQLSeniorLesson = {
    nameLesson: 'Продвинутый SQL',
    countLesson: 'Занятие #3',
    contentLesson: 'Когда мы присваиваем значение одного одного типа столбцу, который хранит данные другого типа, либо выполняем операции, которые вовлекают данные разных типов, SQL Server пытается выполнить преобразование и привести используемое значение к нужному типу. Но не все преобразования SQL Server может выполнить автоматически. SQL Server может выполнять неявные преобразования от типа с меньшим приоритетом к типу с большим приоритетом. Список приоритетов (чем выше, тем больший приоритет): datetime, smalldatetime, float, real, decimal, money, smallmoney, int, smallint, tinyint, bit, nvarchar, nchar, varchar, char. То есть SQL Server автоматически может преобразовать число 100.0 (float) в дату и время (datetime). В тех случаях, когда необходимо выполнить преобразования от типов с высшим приоритетом к типам с низшим приоритетом, то надо выполнять явное приведение типов. Для этого в T-SQL определены две функции: CONVERT и CAST.',
    homeWorkLesson: 'Преобразование нескольких типов данных в другие',
    nameTeacherLesson: 'Александр Миранков'
};

const HTMLCSSJunLesson = {
    nameLesson: 'Основы HTML и CSS',
    countLesson: 'Занятие #1',
    contentLesson: 'В ходе первого урока вы ознакомитесь с рабочей средой Boilerplate, выполните её установку, а также ознакомитесь со всеми необходимыми программами для создания современных веб сайтов. Boilerplate это программа позволяющая настроить все необходимые файлы для разработки сайта. Она включает в себе различные CSS и HTML файлы для быстрого старта написания сайта.',
    homeWorkLesson: 'Отобразить в бразуре заголовок первого уровня Hello World!',
    nameTeacherLesson: 'Александр Миранков'
};

const HTMLCSSMiddleLesson = {
    nameLesson: 'Средний HTML и CSS',
    countLesson: 'Занятие #2',
    contentLesson: 'В ходе урока вы изучите работу с Gulp файлом, научитесь прописывать команды через него, а также выполнять многочисленные задачи с использованием Gulp. Вы настроите сборку, установите плагины Gulp, такие как: Livereload, CSS и JS Minify, CSS Autoprefixer и некоторые другие. Благодаря плагинам страница сможет автоматически перезагружаться, поэтому все изменения будут видны сразу же при сохранение файла. Кроме того, плагины позволят оптимизировать код, удаляя пробелы и не нужные символы.',
    homeWorkLesson: 'Прописать несколько простейших команд в файле Gulp',
    nameTeacherLesson: 'Александр Миранков'
};

const HTMLCSSSeniorLesson = {
    nameLesson: 'Продвинутый HTML и CSS',
    countLesson: 'Занятие #3',
    contentLesson: 'В ходе урока вы познакомитесь с дополнительными методами адаптации блоков, а также адаптируете несколько основных блоков сайта. При помощи стилей Bootstrap, адаптация занимает намного меньше времени и усилий, нежели делать это на чистом CSS. Вы будете использовать специальные стили Bootstrap, отвечающие за стили блоков на разных разрешениях экрана.',
    homeWorkLesson: 'Сверстать landing-page + адаптив',
    nameTeacherLesson: 'Александр Миранков'
};

const PythonJunLesson = {
    nameLesson: 'Основы Python',
    countLesson: 'Занятие #1',
    contentLesson: 'В ходе первого урока вы ознакомитесь с языком Python, узнаете на что данный язык способен, какие проекты построены на Питоне и какие возможности в нем есть. Для работы с ним необходимо установить среду разработки и скачать сам язык. В уроке вы установите Python, скачаете текстовый редактор для написания кода и создадите вашу первую программу.',
    homeWorkLesson: 'Написать программу Hello World!',
    nameTeacherLesson: 'Александр Миранков'
};

const PythonMiddleLesson = {
    nameLesson: 'Средний Python',
    countLesson: 'Занятие #2',
    contentLesson: 'Python обладает мощным функционалом для работы с файлами. При помощи Python вы можете читать и записывать данные в файл, используя различные режимы для этого. В уроке будет рассмотрена тема работы с файлами, а также будет создано небольшое приложение, позволяющее записывать в файл полученные от пользователя данные. Также вы узнаете про предназначение исключений, научитесь их создавать и отслеживать всевозможные ошибки в коде еще до их появления.',
    homeWorkLesson: 'Сериализовать файл с помощью языка Python',
    nameTeacherLesson: 'Александр Миранков'
};

const PythonSeniorLesson = {
    nameLesson: 'Продвинутый Python',
    countLesson: 'Занятие #3',
    contentLesson: 'Python обладает обширной базой различных модулей и возможностей, которые позволяют ему работать с множеством вещей. В уроке будет рассмотрена тема работы с базами данных. Вы научитесь создавать БД, помещать в неё данные через консольное приложение и выводить записи из базы данных на экран. Все запросы к БД будут построены на языке SQL, а в качестве самой базы данных будет использована SQLite3.',
    homeWorkLesson: 'Написать несколько запросов к базе данных с помощью Python',
    nameTeacherLesson: 'Александр Миранков'
};

const AndroidJunLesson = {
    nameLesson: 'Основы Android',
    countLesson: 'Занятие #1',
    contentLesson: 'Мобильная разработка - одна из самых динамично развивающихся отраслей IT индустрии. Тенденция к этому, несомненно, сохранится. В этих реалиях умение писать мобильные приложения это лишь малая часть профессиональной разработки. Нужно уметь писать красивый отказоустойчивый код с понятной чистой архитектурой и полным разделением логики. Код, который будет понятен как книга любому читателю. Так же, необходимо знать все современные подходы разработки Android приложений, разбираться в хороших и плохих "новинках" Android разработки. Обо всем этом вы узнаете при прохождении нашего курса. Если вы хотите быть модным, современным и профессиональным Android-разработчиком, то вы обязаны пройти этот курс!',
    homeWorkLesson: 'Настроить среду разработки',
    nameTeacherLesson: 'Александр Миранков'
};

const AndroidMiddleLesson = {
    nameLesson: 'Средний Android',
    countLesson: 'Занятие #2',
    contentLesson: 'Давайте посмотрим, как в Андроид приложениях формируется то, что мы видим на экране.Если проводить аналогию с Windows, то приложение состоит из окон, называемых Activity. В конкретный момент времени обычно отображается одно Activity и занимает весь экран, а приложение переключается между ними. В качестве примера можно рассмотреть почтовое приложение. В нем одно Activity – список писем, другое – просмотр письма, третье – настройки ящика. При работе вы перемещаетесь по ним. Содержимое Activity формируется из различных компонентов, называемых View. Самые распространенные View - это кнопка, поле ввода, чекбокс и т.д.',
    homeWorkLesson: 'hello',
    nameTeacherLesson: 'Разработать простейшее приложение (калькулятор)'
};

const AndroidSeniorLesson = {
    nameLesson: 'Продвинутый Android',
    countLesson: 'Занятие #3',
    contentLesson: 'Для начала, немного теории по взаимодействию приложения и БД. В приложении, при подключении к БД мы указываем имя БД и версию. При этом могут возникнуть следующие ситуации: 1) БД не существует. Это может быть например в случае первичной установки программы. В этом случае приложение должно само создать БД и все таблицы в ней. И далее оно уже работает с только что созданной БД. 2) БД существует, но ее версия устарела. Это может быть в случае обновления программы. Например новой версии программы нужны дополнительные поля в старых таблицах или новые таблицы. В этом случае приложение должно апдейтить существующие таблицы и создать новые, если это необходимо. 3) БД существует и ее версия актуальна. В этом случае приложение успешно подключается к БД и работает. Как вы понимаете, фраза "приложение должно" равнозначна фразе "разработчик должен", т.е. это наша задача. Для обработки описанных выше ситуаций нам надо создать класс, являющийся наследником для SQLiteOpenHelper. Назовем его DBHelper. Этот класс предоставит нам методы для создания или обновления БД в случаях ее отсутствия или устаревания. onCreate - метод, который будет вызван, если БД, к которой мы хотим подключиться – не существует onUpgrade - будет вызван в случае, если мы пытаемся подключиться к БД более новой версии, чем существующая Давайте накидаем простое приложение – справочник контактов, которое будет хранить имя и email. Вводить данные будем на экране приложения, а для отображения информации используем логи. Обычно для этого используется List (список) – но мы эту тему пока не знаем. Да и не хочется перегружать приложение. Главное – освоить приемы работы с БД.',
    homeWorkLesson: 'Привязать свое приложение к базе данных',
    nameTeacherLesson: 'Александр Миранков'
};

const iOSJunLesson = {
    nameLesson: 'Основы iOS',
    countLesson: 'Занятие #1',
    contentLesson: 'Мы познакомимся со специализацией и рассмотрим какие знания вы получите после прохождения первого курса. Поговорим о том, зачем вообще Apple создала новый язык и в чем его преимущества. После этого мы расскажем как установить и настроить среду разработки Xcode.',
    homeWorkLesson: 'Настроить среду разработки',
    nameTeacherLesson: 'Александр Миранков'
};

const iOSMiddleLesson = {
    nameLesson: 'Средний iOS',
    countLesson: 'Занятие #2',
    contentLesson: 'Вы узнаете как создавать переменные и каких типов они могут быть. Мы расскажем о классах и структурах, функциях и методах, значимых и ссылочных типах. В конце недели вас ждет ваше первое практическое задание.',
    homeWorkLesson: 'Разработать простейшее приложение (калькулятор)',
    nameTeacherLesson: 'Александр Миранков'
};

const iOSSeniorLesson = {
    nameLesson: 'Продвинутый iOS',
    countLesson: 'Занятие #3',
    contentLesson: 'Эта неделя посвящена классам. Мы рассмотрим такие темы как наследование, расширение классов, контроль доступа. Помимо этого мы затронем тему управления памятью.',
    homeWorkLesson: 'Разработать свое первое крупное приложение и загурзить его в AppleStore',
    nameTeacherLesson: 'Александр Миранков'
};

const setJavaJunLesson = localStorage.setItem('JavaJunLesson', JSON.stringify(JavaJunLesson));
const setJavaMiddleLesson = localStorage.setItem('JavaMiddleLesson', JSON.stringify(JavaMiddleLesson));
const setJavaSeniorLesson = localStorage.setItem('JavaSeniorLesson', JSON.stringify(JavaSeniorLesson));
const setCSharpJunLesson = localStorage.setItem('CSharpJunLesson', JSON.stringify(CSharpJunLesson));
const setCSharpMiddleLesson = localStorage.setItem('CSharpMiddleLesson', JSON.stringify(CSharpMiddleLesson));
const setCSharpSeniorLesson = localStorage.setItem('CSharpSeniorLesson', JSON.stringify(CSharpSeniorLesson));
const setJavaScriptJunLesson = localStorage.setItem('JavaScriptJunLesson', JSON.stringify(JavaScriptJunLesson));
const setJavaScriptMiddleLesson = localStorage.setItem('JavaScriptMiddleLesson', JSON.stringify(JavaScriptMiddleLesson));
const setJavaScriptSeniorLesson = localStorage.setItem('JavaScriptSeniorLesson', JSON.stringify(JavaScriptSeniorLesson));
const setCPlusJunLesson = localStorage.setItem('CPlusJunLesson', JSON.stringify(CPlusJunLesson));
const setCPlusMiddleLesson = localStorage.setItem('CPlusMiddleLesson', JSON.stringify(CPlusMiddleLesson));
const setCPlusSeniorLesson = localStorage.setItem('CPlusSeniorLesson', JSON.stringify(CPlusSeniorLesson));
const setSQLJunLesson = localStorage.setItem('SQLJunLesson', JSON.stringify(SQLJunLesson));
const setSQLMiddleLesson = localStorage.setItem('SQLMiddleLesson', JSON.stringify(SQLMiddleLesson));
const setSQLSeniorLesson = localStorage.setItem('SQLSeniorLesson', JSON.stringify(SQLSeniorLesson));
const setHTMLCSSJunLesson = localStorage.setItem('HTMLCSSJunLesson', JSON.stringify(HTMLCSSJunLesson));
const setHTMLCSSMiddleLesson = localStorage.setItem('HTMLCSSMiddleLesson', JSON.stringify(HTMLCSSMiddleLesson));
const setHTMLCSSSeniorLesson = localStorage.setItem('HTMLCSSSeniorLesson', JSON.stringify(HTMLCSSSeniorLesson));
const setPythonJunLesson = localStorage.setItem('PythonJunLesson', JSON.stringify(PythonJunLesson));
const setPythonMiddleLesson = localStorage.setItem('PythonMiddleLesson', JSON.stringify(PythonMiddleLesson));
const setPythonSeniorLesson = localStorage.setItem('PythonSeniorLesson', JSON.stringify(PythonSeniorLesson));
const setAndroidJunLesson = localStorage.setItem('AndroidJunLesson', JSON.stringify(AndroidJunLesson));
const setAndroidMiddleLesson = localStorage.setItem('AndroidMiddleLesson', JSON.stringify(AndroidMiddleLesson));
const setAndroidSeniorLesson = localStorage.setItem('AndroidSeniorLesson', JSON.stringify(AndroidSeniorLesson));
const setiOSJunLesson = localStorage.setItem('iOSJunLesson', JSON.stringify(iOSJunLesson));
const setiOSMiddleLesson = localStorage.setItem('iOSMiddleLesson', JSON.stringify(iOSMiddleLesson));
const setiOSSeniorLesson = localStorage.setItem('iOSSeniorLesson', JSON.stringify(iOSSeniorLesson));
